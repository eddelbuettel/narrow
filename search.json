[{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://paleolimbot.github.io/sparrow/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://paleolimbot.github.io/sparrow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author, maintainer.","code":""},{"path":"https://paleolimbot.github.io/sparrow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D (2022). sparrow: R Interface 'Apache Arrow' C API. https://github.com/paleolimbot/sparrow, https://paleolimbot.github.io/sparrow/.","code":"@Manual{,   title = {sparrow: An R Interface to the 'Apache Arrow' C API},   author = {Dewey Dunnington},   year = {2022},   note = {https://github.com/paleolimbot/sparrow, https://paleolimbot.github.io/sparrow/}, }"},{"path":"https://paleolimbot.github.io/sparrow/index.html","id":"sparrow","dir":"","previous_headings":"","what":"An R Interface to the Apache Arrow C API","title":"An R Interface to the Apache Arrow C API","text":"goal sparrow wrap Arrow Data C API Arrow Stream C API provide lightweight Arrow support R packages consume produce streams data Arrow format.","code":""},{"path":"https://paleolimbot.github.io/sparrow/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Interface to the Apache Arrow C API","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"paleolimbot/sparrow\")"},{"path":"https://paleolimbot.github.io/sparrow/index.html","id":"creating-arrays","dir":"","previous_headings":"","what":"Creating arrays","title":"An R Interface to the Apache Arrow C API","text":"can create Arrow array using as_sparrow_array(). many types (e.g., integers doubles), done without copying memory: sparrow just arranges existing R vector memory protects lifetime underlying struct ArrowArray. Arrays RecordBatches arrow package, almost always zero-copy operation instantaneous even large Arrays.","code":"library(sparrow) (array <- as_sparrow_array(1:5)) #> <sparrow_array i[5]> #> - schema: #>   <sparrow_schema 'i' at 0x130978070> #>   - format: i #>   - name: NULL #>   - flags: #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x1309794b0> #>   - length: 5 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ : NULL #>     $ : int [1:5] 1 2 3 4 5 #>   - dictionary: NULL #>   - children[0]: library(arrow) (array2 <- as_sparrow_array(Array$create(1:5))) #> <sparrow_array i[5]> #> - schema: #>   <sparrow_schema 'i' at 0x1308adee0> #>   - format: i #>   - name: #>   - flags: nullable #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x1308ab320> #>   - length: 5 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ :<externalptr> #>     $ :<externalptr> #>   - dictionary: NULL #>   - children[0]:"},{"path":"https://paleolimbot.github.io/sparrow/index.html","id":"exporting-arrays","dir":"","previous_headings":"","what":"Exporting arrays","title":"An R Interface to the Apache Arrow C API","text":"convert array object type, use from_sparrow_array(): sparrow package built-defaults converting arrays R objects; can also specify using ptype argument:","code":"str(from_sparrow_array(array)) #>  int [1:5] 1 2 3 4 5 str(from_sparrow_array(array, ptype = double())) #>  num [1:5] 1 2 3 4 5 from_sparrow_array(array, ptype = arrow::Array) #> Array #> <int32> #> [ #>   1, #>   2, #>   3, #>   4, #>   5 #> ]"},{"path":"https://paleolimbot.github.io/sparrow/index.html","id":"streams","dir":"","previous_headings":"","what":"Streams","title":"An R Interface to the Apache Arrow C API","text":"Arrow C API also specifies experimental stream interface. addition handling streams created elsewhere, can create streams based sparrow_array(): …based function returns one sparrow_array()s: can pass Arrow RecordBatchReader using sparrow_array_stream_to_arrow(): Currently attemping export arrow RecordBatchReader() segfaults unknown reason, theory one also go direction.","code":"stream1 <- as_sparrow_array_stream(as_sparrow_array(1:3)) sparrow_array_stream_get_next(stream1) #> <sparrow_array i[3]> #> - schema: #>   <sparrow_schema 'i' at 0x116664b50> #>   - format: i #>   - name: NULL #>   - flags: #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x116663b30> #>   - length: 3 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ :<externalptr> #>     $ :<externalptr> #>   - dictionary: NULL #>   - children[0]: sparrow_array_stream_get_next(stream1) #> NULL counter <- -1 rows_per_chunk <- 5 csv_file <- readr::readr_example(\"mtcars.csv\") schema <- as_sparrow_array(   readr::read_csv(     csv_file,     n_max = 0,     col_types = readr::cols(.default = readr::col_double())   ) )$schema  stream2 <- sparrow_array_stream_function(schema, function() {   counter <<- counter + 1L   result <- readr::read_csv(     csv_file,     skip = 1 + (counter * rows_per_chunk),     n_max = rows_per_chunk,     col_names = c(       \"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\",       \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\"     ),     col_types = readr::cols(.default = readr::col_double())   )    if (nrow(result) > 0) result else NULL }) reader <- sparrow_array_stream_to_arrow(stream2) as.data.frame(reader$read_table()) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # … with 22 more rows"},{"path":"https://paleolimbot.github.io/sparrow/index.html","id":"c-data-access","dir":"","previous_headings":"","what":"C data access","title":"An R Interface to the Apache Arrow C API","text":"C data interface ABI stable (version stream interface ABI stable future) can access underlying pointers compiled code R package (inline C C++ code). sparrow_schema() external pointer struct ArrowSchema, sparrow_array_data() external pointer struct ArrowArray, sparrow_array() list() sparrow_schema() sparrow_array_data(). lifecycles objects pointed external pointers managed R’s garbage collector: object gets garbage collected release() callback called (isn’t NULL) underlying memory struct Arrow... freed. can call release() callback compiled code probably don’t want unless ’re explicitly limiting access object.","code":"#include <R.h> #include <Rinternals.h> #include \"sparrow.h\"  SEXP extract_null_count(SEXP array_data_xptr) {   struct ArrowArray* array_data = (struct ArrowArray*) R_ExternalPtrAddr(array_data_xptr);   return Rf_ScalarInteger(array_data->null_count); } .Call(\"extract_null_count\", as_sparrow_array(c(NA, NA, 1:5))$array_data) #> [1] 2"},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_array.NULL.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R objects to Arrow vectors — as_sparrow_array.NULL","title":"Convert R objects to Arrow vectors — as_sparrow_array.NULL","text":"methods return sparrow_array() R objects involve copying unnecessary allocating. Two excpetions (1) ALTREP objects, expanded, (2) character vectors, converted UTF-8 serialized single raw() vector.","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_array.NULL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R objects to Arrow vectors — as_sparrow_array.NULL","text":"","code":"# S3 method for `NULL` as_sparrow_array(x, ..., name = NULL)  # S3 method for logical as_sparrow_array(x, ..., name = NULL)  # S3 method for integer as_sparrow_array(x, ..., name = NULL)  # S3 method for double as_sparrow_array(x, ..., name = NULL)  # S3 method for character as_sparrow_array(x, ..., name = NULL)  # S3 method for factor as_sparrow_array(x, ..., name = NULL)  # S3 method for raw as_sparrow_array(x, ..., name = NULL)  # S3 method for data.frame as_sparrow_array(x, ..., name = NULL)"},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_array.NULL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R objects to Arrow vectors — as_sparrow_array.NULL","text":"x object convert sparrow_array() ... Passed S3 methods name optional name","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_array.NULL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R objects to Arrow vectors — as_sparrow_array.NULL","text":"sparrow_array()","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_array.NULL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert R objects to Arrow vectors — as_sparrow_array.NULL","text":"","code":"as_sparrow_array(NULL) #> <sparrow_array n[0]> #> - schema: #>   <sparrow_schema 'n' at 0x556cb5967890> #>   - format: n #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb5b2e5c0> #>   - length: 0 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[0]: #>   - dictionary: NULL #>   - children[0]: as_sparrow_array(c(TRUE, FALSE, NA)) #> <sparrow_array i[3]> #> - schema: #>   <sparrow_schema 'i' at 0x556cb57ff690> #>   - format: i #>   - name: NULL #>   - flags: nullable #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb584e970> #>   - length: 3 #>   - null_count: 1 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ : 'sparrow_bitmask' raw 01 #>     $ : logi [1:3] TRUE FALSE NA #>   - dictionary: NULL #>   - children[0]: as_sparrow_array(1:10) #> <sparrow_array i[10]> #> - schema: #>   <sparrow_schema 'i' at 0x556cb4b8e9a0> #>   - format: i #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb5bd0bf0> #>   - length: 10 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ : NULL #>     $ : int [1:10] 1 2 3 4 5 6 7 8 9 10 #>   - dictionary: NULL #>   - children[0]: as_sparrow_array(c(1.1, 2.2)) #> <sparrow_array g[2]> #> - schema: #>   <sparrow_schema 'g' at 0x556cb4de7dd0> #>   - format: g #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb5b6ef60> #>   - length: 2 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ : NULL #>     $ : num [1:2] 1.1 2.2 #>   - dictionary: NULL #>   - children[0]: as_sparrow_array(as.raw(0x00)) #> <sparrow_array C[1]> #> - schema: #>   <sparrow_schema 'C' at 0x556cb5967890> #>   - format: C #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb58614d0> #>   - length: 1 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ : NULL #>     $ : raw 00 #>   - dictionary: NULL #>   - children[0]: as_sparrow_array(\"fish\") #> <sparrow_array u[1]> #> - schema: #>   <sparrow_schema 'u' at 0x556cb57ff690> #>   - format: u #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb5b2e5c0> #>   - length: 1 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[3]: List of 3 #>     $ : NULL #>     $ : int [1:2] 0 4 #>     $ : raw [1:4] 66 69 73 68 #>   - dictionary: NULL #>   - children[0]: as_sparrow_array(data.frame(x = 1:10, y = as.raw(1:10))) #> <sparrow_array +s[10]> #> - schema: #>   <sparrow_schema '+s' at 0x556cb5bd55d0> #>   - format: +s #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[2]: #>     <sparrow_schema 'i' at 0x556cb5ce6990> #>     - format: i #>     - name: x #>     - flags:  #>     - metadata:  list() #>     - dictionary: NULL #>     - children[0]: #>     <sparrow_schema 'C' at 0x556cb5b89270> #>     - format: C #>     - name: y #>     - flags:  #>     - metadata:  list() #>     - dictionary: NULL #>     - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb5d78d00> #>   - length: 10 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[1]: List of 1 #>     $ : NULL #>   - dictionary: NULL #>   - children[2]: #>     <sparrow_array_data at 0x556cb584e970> #>     - length: 10 #>     - null_count: 0 #>     - offset: 0 #>     - buffers[2]: List of 2 #>       $ : NULL #>       $ : int [1:10] 1 2 3 4 5 6 7 8 9 10 #>     - dictionary: NULL #>     - children[0]: #>     <sparrow_array_data at 0x556cb5e60230> #>     - length: 10 #>     - null_count: 0 #>     - offset: 0 #>     - buffers[2]: List of 2 #>       $ : NULL #>       $ : raw [1:10] 01 02 03 04 ... #>     - dictionary: NULL #>     - children[0]:"},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_bitmask.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bitmask buffers — as_sparrow_bitmask","title":"Create bitmask buffers — as_sparrow_bitmask","text":"Create bitmask buffers","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_bitmask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bitmask buffers — as_sparrow_bitmask","text":"","code":"as_sparrow_bitmask(x, ...)  # S3 method for default as_sparrow_bitmask(x, ...)  # S3 method for sparrow_bitmask as_sparrow_bitmask(x, ...)  # S3 method for logical as_sparrow_bitmask(x, ...)  new_arrow_bitmask(buffer = raw())  # S3 method for sparrow_bitmask as.logical(x, ..., start = 1, end = NULL)"},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_bitmask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bitmask buffers — as_sparrow_bitmask","text":"x object convert bitmask ... Passed S3 methods buffer raw() vector containing bitmask data start, end Start end indices (inclusive) limit converting logical().","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_bitmask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create bitmask buffers — as_sparrow_bitmask","text":"object class 'sparrow_bitmask'","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_bitmask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create bitmask buffers — as_sparrow_bitmask","text":"","code":"as_sparrow_bitmask(c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)) #> <sparrow_arrow_bitmask[8]> #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE as.logical(new_arrow_bitmask(0x01)) #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_int64.html","id":null,"dir":"Reference","previous_headings":"","what":"64-bit integer vectors — as_sparrow_int64","title":"64-bit integer vectors — as_sparrow_int64","text":"64-bit integer vectors","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_int64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"64-bit integer vectors — as_sparrow_int64","text":"","code":"as_sparrow_int64(x, ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_int64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"64-bit integer vectors — as_sparrow_int64","text":"x object convert large integer vector ... Passed S3 Methods","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_int64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"64-bit integer vectors — as_sparrow_int64","text":"object class \"sparrow_int64\"","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/as_sparrow_int64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"64-bit integer vectors — as_sparrow_int64","text":"","code":"as_sparrow_int64(1:5) #> <sparrow_int64[5]> #> [1] 1 2 3 4 5"},{"path":"https://paleolimbot.github.io/sparrow/reference/from_sparrow_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Arrow vectors to R objects — from_sparrow_array","title":"Convert Arrow vectors to R objects — from_sparrow_array","text":"Note from_sparrow_array() dispatches ptype","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/from_sparrow_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Arrow vectors to R objects — from_sparrow_array","text":"","code":"from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for default from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for `NULL` from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for logical from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for integer from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for double from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for raw from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for character from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for factor from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)  # S3 method for data.frame from_sparrow_array(x, ptype = sparrow_default_ptype(x$schema), ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/from_sparrow_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Arrow vectors to R objects — from_sparrow_array","text":"x sparrow_array() ptype R object use prototype ... Passed S3 methods","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/from_sparrow_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Arrow vectors to R objects — from_sparrow_array","text":"object class ptype","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/from_sparrow_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Arrow vectors to R objects — from_sparrow_array","text":"","code":"from_sparrow_array(as_sparrow_array(c(TRUE, FALSE, NA)), logical()) #> [1]  TRUE FALSE    NA"},{"path":"https://paleolimbot.github.io/sparrow/reference/parse_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Arrow format strings — parse_format","title":"Parse Arrow format strings — parse_format","text":"Parse Arrow format strings","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/parse_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Arrow format strings — parse_format","text":"","code":"parse_format(format)"},{"path":"https://paleolimbot.github.io/sparrow/reference/parse_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Arrow format strings — parse_format","text":"format format string.","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/parse_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Arrow format strings — parse_format","text":"list() elements: format: input string abbreviation: short name type spec: parsing pattern type description: human-readable name type args: list() key/value pairs type arguments","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/parse_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Arrow format strings — parse_format","text":"","code":"parse_format(\"i\") #> $format #> [1] \"i\" #>  #> $abbreviation #> [1] \"i\" #>  #> $spec #> [1] \"i\" #>  #> $description #> [1] \"int32\" #>  #> $args #> named list() #>  parse_format(\"w:128\") #> $format #> [1] \"w:128\" #>  #> $abbreviation #> [1] \"w\" #>  #> $spec #> [1] \"w:{n_bytes}\" #>  #> $description #> [1] \"fixed-width binary\" #>  #> $args #> $args$n_bytes #> [1] 128 #>  #>  parse_format(\"+ud:1,2,3\") #> $format #> [1] \"+ud:1,2,3\" #>  #> $abbreviation #> [1] \"+ud\" #>  #> $spec #> [1] \"+ud:{type_ids}\" #>  #> $description #> [1] \"dense union with type ids\" #>  #> $args #> $args$type_ids #> [1] 1 2 3 #>  #>"},{"path":"https://paleolimbot.github.io/sparrow/reference/pkg-arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to and from arrow package types — from_sparrow_array.Array","title":"Convert to and from arrow package types — from_sparrow_array.Array","text":"Convert arrow package types","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/pkg-arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to and from arrow package types — from_sparrow_array.Array","text":"","code":"# S3 method for Array from_sparrow_array(x, ptype, ...)  # S3 method for R6ClassGenerator from_sparrow_array(x, ptype, ...)  # S3 method for DataType as_sparrow_schema(x, ...)  # S3 method for Field as_sparrow_schema(x, ...)  # S3 method for Schema as_sparrow_schema(x, ...)  # S3 method for Scalar as_sparrow_array(x, ...)  # S3 method for Array as_sparrow_array(x, ...)  # S3 method for RecordBatch as_sparrow_array(x, ...)  sparrow_array_stream_to_arrow(x)  # S3 method for RecordBatchReader as_sparrow_array_stream(x, ...)  # S3 method for Scanner as_sparrow_array_stream(x, ...)  # S3 method for Dataset as_sparrow_array_stream(x, ...)  # S3 method for Table as_sparrow_array_stream(x, ...)  # S3 method for RecordBatchFileReader as_sparrow_array_stream(x, ...)  # S3 method for RecordBatchStreamReader as_sparrow_array_stream(x, ...)  # S3 method for Array as_sparrow_array_stream(x, ...)  # S3 method for ChunkedArray as_sparrow_array_stream(x, ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/pkg-arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to and from arrow package types — from_sparrow_array.Array","text":"x object convert 'arrow' package types ptype R object use prototype ... Passed S3 methods","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sparrow: An R Interface to the 'Apache Arrow' C API — sparrow-package","title":"sparrow: An R Interface to the 'Apache Arrow' C API — sparrow-package","text":"Provides R API 'Apache Arrow' C API.","code":""},{"path":[]},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sparrow: An R Interface to the 'Apache Arrow' C API — sparrow-package","text":"Maintainer: Dewey Dunnington dewey@fishandwhistle.net (ORCID)","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Create arrow vectors — sparrow_array","title":"Create arrow vectors — sparrow_array","text":"Create arrow vectors","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create arrow vectors — sparrow_array","text":"","code":"sparrow_array(   schema = sparrow_schema(\"n\"),   array_data = sparrow_array_data(),   validate = TRUE )  sparrow_array_validate(x)  as_sparrow_array(x, ...)  # S3 method for sparrow_array as_sparrow_array(x, ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create arrow vectors — sparrow_array","text":"schema sparrow_schema() array_data sparrow_array_data() validate Use FALSE skip validation x object convert sparrow_array() ... Passed S3 methods","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create arrow vectors — sparrow_array","text":"object class \"sparrow_array\"","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create arrow vectors — sparrow_array","text":"","code":"sparrow_array() #> <sparrow_array n[0]> #> - schema: #>   <sparrow_schema 'n' at 0x556cb54accc0> #>   - format: n #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb52589a0> #>   - length: 0 #>   - null_count: -1 #>   - offset: 0 #>   - buffers[0]: #>   - dictionary: NULL #>   - children[0]:"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Arrow arrays — sparrow_array_data","title":"Create Arrow arrays — sparrow_array_data","text":"Create Arrow arrays","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Arrow arrays — sparrow_array_data","text":"","code":"sparrow_array_data(   buffers = NULL,   length = 0,   null_count = -1,   offset = 0,   children = NULL,   dictionary = NULL )  sparrow_array_data_info(x, ...)  as_sparrow_array_data(x, ...)  # S3 method for sparrow_array_data as_sparrow_array_data(x, ...)  as_sparrow_buffer(x, ...)  # S3 method for default as_sparrow_buffer(x, ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Arrow arrays — sparrow_array_data","text":"buffers list() R vectors whose memory serves underlying buffer Arrow format. length logical size array null_count number NULL values -1 computed yet. offset number elements skip front array. children Child vectors list() coerced as_sparrow_array_data() dictionary Dictionary array dictionary types. x object convert sparrow_array ... Passed S3 Methods","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Arrow arrays — sparrow_array_data","text":"object class \"sparrow_array_data\"","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Arrow arrays — sparrow_array_data","text":"","code":"sparrow_array_data(1:100, 100) #> <sparrow_array_data at 0x556cb4f85f10> #> - length: 100 #> - null_count: -1 #> - offset: 0 #> - buffers[1]: List of 1 #>   $ : int [1:100] 1 2 3 4 5 6 7 8 9 10 ... #> - dictionary: NULL #> - children[0]:"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream objects as Arrow arrays — sparrow_array_stream","title":"Stream objects as Arrow arrays — sparrow_array_stream","text":"Stream objects Arrow arrays","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream objects as Arrow arrays — sparrow_array_stream","text":"","code":"sparrow_array_stream(list_of_array = list(), schema = NULL, validate = TRUE)  sparrow_array_stream_collect(array_stream, ptype = NULL)  sparrow_array_stream_get_schema(array_stream)  sparrow_array_stream_get_next(array_stream, validate = TRUE)  as_sparrow_array_stream(x, ...)  # S3 method for sparrow_array_stream as_sparrow_array_stream(x, ...)  # S3 method for list as_sparrow_array_stream(x, ...)  # S3 method for `function` as_sparrow_array_stream(x, ...)  # S3 method for default as_sparrow_array_stream(x, ...)  # S3 method for sparrow_array as_sparrow_array_stream(x, ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream objects as Arrow arrays — sparrow_array_stream","text":"list_of_array list() sparrow_array()s. schema schema arrays list_of_array. validate Use FALSE skip validation arrays list_of_array. array_stream object class \"sparrow_array_stream\" ptype R object use prototype x R object convert Arrow Stream ... Passed S3 methods","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream objects as Arrow arrays — sparrow_array_stream","text":"object class \"sparrow_array_stream\"","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Array streams from functions — sparrow_array_stream_function","title":"Array streams from functions — sparrow_array_stream_function","text":"Array streams functions","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array streams from functions — sparrow_array_stream_function","text":"","code":"sparrow_array_stream_function(schema, fun, validate = TRUE)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Array streams from functions — sparrow_array_stream_function","text":"schema sparrow_schema() fun R function whose return value converted sparrow_array() passed caller. validate Use FALSE skip validation output function schema.","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_array_stream_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Array streams from functions — sparrow_array_stream_function","text":"object class \"sparrow_array_stream\"","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_deep_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create copies of Arrow vectors — sparrow_deep_copy","title":"Create copies of Arrow vectors — sparrow_deep_copy","text":"Create copies Arrow vectors","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_deep_copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create copies of Arrow vectors — sparrow_deep_copy","text":"","code":"sparrow_deep_copy(x)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_deep_copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create copies of Arrow vectors — sparrow_deep_copy","text":"x sparrow_array().","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_deep_copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create copies of Arrow vectors — sparrow_deep_copy","text":"sparrow_array()","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_deep_copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create copies of Arrow vectors — sparrow_deep_copy","text":"","code":"sparrow_deep_copy(as_sparrow_array(1:5)) #> <sparrow_array i[5]> #> - schema: #>   <sparrow_schema 'i' at 0x556cb50a1530> #>   - format: i #>   - name: NULL #>   - flags:  #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: #> - array_data: #>   <sparrow_array_data at 0x556cb00880e0> #>   - length: 5 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[2]: List of 2 #>     $ :<externalptr>  #>     $ :<externalptr>  #>   - dictionary: NULL #>   - children[0]:"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_default_ptype.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess prototypes for Arrow schemas — sparrow_default_ptype","title":"Guess prototypes for Arrow schemas — sparrow_default_ptype","text":"Guess prototypes Arrow schemas","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_default_ptype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess prototypes for Arrow schemas — sparrow_default_ptype","text":"","code":"sparrow_default_ptype(schema)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_default_ptype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess prototypes for Arrow schemas — sparrow_default_ptype","text":"schema sparrow_schema()","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_default_ptype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess prototypes for Arrow schemas — sparrow_default_ptype","text":"zero-length array prototype","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_default_ptype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess prototypes for Arrow schemas — sparrow_default_ptype","text":"","code":"sparrow_default_ptype(sparrow_schema(\"n\")) #> logical(0) sparrow_default_ptype(   sparrow_schema(\"+s\", children = list(sparrow_schema(\"i\", \"colname\"))) ) #> [1] colname #> <0 rows> (or 0-length row.names)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Arrow Schema objects — sparrow_schema","title":"Create Arrow Schema objects — sparrow_schema","text":"Create Arrow Schema objects","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Arrow Schema objects — sparrow_schema","text":"","code":"sparrow_schema(   format,   name = NULL,   metadata = NULL,   flags = sparrow_schema_flags(),   children = NULL,   dictionary = NULL )  sparrow_schema_flags(   dictionary_ordered = FALSE,   nullable = FALSE,   map_keys_sorted = FALSE )  sparrow_schema_deep_copy(schema)  as_sparrow_schema(x, ...)  # S3 method for sparrow_schema as_sparrow_schema(x, ...)  # S3 method for character as_sparrow_schema(x, ...)  sparrow_schema_info(x, ..., recursive = FALSE)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Arrow Schema objects — sparrow_schema","text":"format format string. name optional name metadata named character vector list() raw() containing key/value metadata. flags Flags set input (see sparrow_schema_flags()) children list() objects created using sparrow_schema(). dictionary sparrow_schema() dictionary type. dictionary_ordered TRUE dictionary array ordered nullable TRUE type semantically nullable map_keys_sorted TRUE keys map sorted schema schema created sparrow_schema() x object convert sparrow_schema() ... Passed S3 methods recursive Use TRUE serialize schema recursively","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Arrow Schema objects — sparrow_schema","text":"external pointer class 'sparrow_schema'","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_vctr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create R vector wrappers around 'Arrow' arrays — sparrow_vctr","title":"Create R vector wrappers around 'Arrow' arrays — sparrow_vctr","text":"Create R vector wrappers around 'Arrow' arrays","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_vctr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create R vector wrappers around 'Arrow' arrays — sparrow_vctr","text":"","code":"sparrow_vctr(array = sparrow_array())  as_sparrow_vctr(x, ...)"},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_vctr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create R vector wrappers around 'Arrow' arrays — sparrow_vctr","text":"array sparrow_array() x object convert sparrow_vctr() ... Passed as_sparrow_array()","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_vctr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create R vector wrappers around 'Arrow' arrays — sparrow_vctr","text":"object class 'sparrow_vctr'","code":""},{"path":"https://paleolimbot.github.io/sparrow/reference/sparrow_vctr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create R vector wrappers around 'Arrow' arrays — sparrow_vctr","text":"","code":"as_sparrow_vctr(1:10) #> <sparrow_vctr[10]> #>  [1]  1  2  3  4  5  6  7  8  9 10"}]
